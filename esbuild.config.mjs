import os from "node:os";
import esbuild, { build } from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import esbuildSvelte from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";
import { sassPlugin } from "esbuild-sass-plugin";
import { replace } from "esbuild-plugin-replace";
import fs from "node:fs";
import {copy} from "esbuild-plugin-copy"

const banner =
  `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// have certain config
const prod = (process.argv.length > 2);
const isBuild = (process.argv[2] === "production");
const isObsidianTest = (process.argv[2] === "obsidian-test");

if (isBuild) {
  var buildDir = "build"
}
else if (isObsidianTest) {
  buildDir = os.homedir() + '\\Documents\\obsidian\\week-note-test\\.obsidian\\plugins\\obsidian-day-planner'
}
else {
  buildDir = "."
}

const context = await esbuild.context({
  banner: {
    js: banner
  },
  outdir: buildDir,
  entryPoints: ["src/main.ts", "src/styles.scss"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  plugins: [
    sassPlugin(),
    esbuildSvelte({
      compilerOptions: { css: true, dev: !prod },
      preprocess: sveltePreprocess()
    }),
    replace({
      include: /release-notes-modal\.ts|main\.ts/,
      changelogMd: JSON.stringify(fs.readFileSync("./CHANGELOG.md", "utf-8")),
      currentPluginVersion: JSON.stringify(JSON.parse(fs.readFileSync("./package.json", "utf-8")).version)
    }),
    copy({
      resolveFrom: 'cwd',
      assets: {
        from: ['./manifest.json'],
        to: [buildDir + "/manifest.json"],
      },
      watch: true
    })
  ]
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
